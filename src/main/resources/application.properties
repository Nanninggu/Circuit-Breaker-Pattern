# Spring Boot
spring.application.name=Circuit-Breaker-Pattern

# Mybatis Location
mybatis.mapper-locations=classpath:mapper/*.xml

# Server port
server.port=8080

# Postgres DB
spring.datasource.url=jdbc:postgresql://localhost:5433/PracticeDB
#spring.datasource.url=jdbc:postgresql://localhost:5432/PracticeDB
spring.datasource.username=postgres
spring.datasource.password=test1234
spring.datasource.driver-class-name=org.postgresql.Driver

# Logging
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate=ERROR

# resilience4j
# 서킷 브레이커의 기본 설정을 정의합니다. Open 되면 모든 호출은 차단 된다.

# 차단기가 열리는 상황과 닫히는 상황을 정리하면 아래와 같다.

# 서킷 브레이커가 열리고 닫히는 상황을 종합하면 다음과 같습니다:
# 차단기가 열리는 상황:
# 실패율 임계값 초과: 설정된 실패율 임계값(50%)을 초과하면 차단기가 열립니다.
# 슬라이딩 창 크기: 슬라이딩 창의 크기(10) 내에서 실패율이 임계값을 초과할 때 차단기가 열립니다.
# 차단기가 닫히는 상황:
# 대기 시간 경과 후 반개방 상태: 차단기가 열린 상태에서 설정된 대기 시간(10초)이 경과하면 반개방 상태로 전환됩니다.
# 반개방 상태에서 성공적인 호출: 반개방 상태에서 허용된 호출 수(3) 내에서 모든 호출이 성공하면 차단기가 닫힙니다.
# 반개방 상태에서 실패: 반개방 상태에서 허용된 호출 중 하나라도 실패하면 차단기가 다시 열립니다.
# 이러한 설정을 통해 서킷 브레이커는 시스템의 안정성을 유지하고, 실패율이 높을 때 자동으로 차단하여 시스템을 보호합니다.

# 옵션1
# 슬라이딩 창의 크기를 10으로 설정합니다.
# 슬라이딩 창은 마지막 'n' 호출의 결과를 기록한다.
resilience4j.circuitbreaker.configs.default.sliding-window-size=10

# 옵션2
# 실패율 임계값을 50%로 설정한다.
# 실패률이 이 임계값을 초과하면 회로 차단기가 개방 상태로 전환된다.
resilience4j.circuitbreaker.configs.default.failure-rate-threshold=50

# 옵션3
# 열린 상태의 대기 시간을 10초로 설정한다.
# 이 기간이 지나면 회로 차단기는 반개방 상태로 전환된다.
resilience4j.circuitbreaker.configs.default.wait-duration-in-open-state=10s

# 옵션4
# 반개방 상태에서 허용되는 호출 수를 3으로 설정한다.
# 이러한 호출이 모두 성공하면 회로 차단기는 닫힌 상태로 다시 전환된다.
# 이러한 호출 중 하나라도 실패하면 회로 차단기가 다시 열린 상태로 전환된다.
resilience4j.circuitbreaker.configs.default.permitted-number-of-calls-in-half-open-state=3

# 옵션5
# 슬라이딩 창의 유형을 개수 기반으로 설정한다.
# 슬라이딩 창은 마지막 'n' 호출의 결과를 기록한다.
resilience4j.circuitbreaker.configs.default.sliding-window-type=COUNT_BASED


